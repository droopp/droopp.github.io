{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DROP (Distributed Reliable Operation Platform) \" ___ ___ ___ \" \" _____ /\\ \\ /\\ \\ /\\ \\ \" \" /::\\ \\ /::\\ \\ /::\\ \\ /::\\ \\ \" \" /:/\\:\\ \\ /:/\\:\\__\\ /:/\\:\\ \\ /:/\\:\\__\\ \" \" /:/ \\:\\__\\ /:/ /:/ / /:/ \\:\\ \\ /:/ /:/ / \" \" /:/__/ \\:|__| /:/_/:/__/___ /:/__/ \\:\\__\\ /:/_/:/ / \" \" \\:\\ \\ /:/ / \\:\\/:::::/ / \\:\\ \\ /:/ / \\:\\/:/ / \" \" \\:\\ /:/ / \\::/~~/~~~~ \\:\\ /:/ / \\::/__/ \" \" \\:\\/:/ / \\:\\~~\\ \\:\\/:/ / \\:\\ \\ \" \" \\::/ / \\:\\__\\ \\::/ / \\:\\__\\ \" \" \\/__/ \\/__/ \\/__/ \\/__/ \" \" DROP - Serverless Functions Made Simple Any process can be packaged as a function enabling you to consume a range of any events or other functions. Run code without thinking about servers. Installing DROP Prerequisites CentOS 7.3 or later, for the 64-bit x86_64 architecture. Yum package management application installed. Root or sudo access to the system. Installation from Vagrantfile (local) curl -O https://raw.githubusercontent.com/droopp/vagrant/master/Vagrantfile . vagrant up Installation from RPM packages curl https://dropfaas.com/RPMS/drop-bootstrap.sh | sudo sh Configuring DROP node (after set up - systemctl restart drop-core) Inter-node communication interface (Optional) If you have more than one network interface and don't want to use default interface, you need configure name of inerface sudo echo 'export DROP_IFACE=eth1' /home/drop-core/.bashrc eth1 - example name of network interface By default node will be used default network interface Declare nodes (Optional) If your network not support multicast you need declare your nodes For example sudo echo '192.168.50.4 192.168.50.5 192.168.50.6' /var/lib/drop/drop-hosts By default nodes will declare self by multicast Linux system optimisation (Optional) In production you need tune linux parameters for better performance ulimit -n vm.swappiness vm.vfs_cache_pressure vm.dirty_ratio vm.dirty_background_ratio vm.dirty_writeback_centisecs vm.dirty_expire_centisecs kernel.panic fs.file-max net.core.netdev_max_backlog net.core.somaxconn net.ipv4.tcp_syncookies net.ipv4.tcp_max_syn_backlog net.ipv4.tcp_max_tw_buckets net.ipv4.tcp_tw_recycle net.ipv4.tcp_timestamps net.ipv4.tcp_tw_reuse net.ipv4.tcp_fin_timeout net.ipv4.tcp_keepalive_time net.ipv4.tcp_keepalive_probes net.ipv4.tcp_keepalive_intvl net.core.wmem_max net.core.rmem_max net.core.rmem_default net.core.wmem_default net.ipv4.tcp_rmem net.ipv4.tcp_wmem","title":"Getting started"},{"location":"#welcome-to-drop-distributed-reliable-operation-platform","text":"\" ___ ___ ___ \" \" _____ /\\ \\ /\\ \\ /\\ \\ \" \" /::\\ \\ /::\\ \\ /::\\ \\ /::\\ \\ \" \" /:/\\:\\ \\ /:/\\:\\__\\ /:/\\:\\ \\ /:/\\:\\__\\ \" \" /:/ \\:\\__\\ /:/ /:/ / /:/ \\:\\ \\ /:/ /:/ / \" \" /:/__/ \\:|__| /:/_/:/__/___ /:/__/ \\:\\__\\ /:/_/:/ / \" \" \\:\\ \\ /:/ / \\:\\/:::::/ / \\:\\ \\ /:/ / \\:\\/:/ / \" \" \\:\\ /:/ / \\::/~~/~~~~ \\:\\ /:/ / \\::/__/ \" \" \\:\\/:/ / \\:\\~~\\ \\:\\/:/ / \\:\\ \\ \" \" \\::/ / \\:\\__\\ \\::/ / \\:\\__\\ \" \" \\/__/ \\/__/ \\/__/ \\/__/ \" \" DROP - Serverless Functions Made Simple Any process can be packaged as a function enabling you to consume a range of any events or other functions. Run code without thinking about servers.","title":"Welcome to DROP (Distributed Reliable Operation Platform)"},{"location":"#installing-drop","text":"","title":"Installing DROP"},{"location":"#prerequisites","text":"CentOS 7.3 or later, for the 64-bit x86_64 architecture. Yum package management application installed. Root or sudo access to the system.","title":"Prerequisites"},{"location":"#installation-from-vagrantfile-local","text":"curl -O https://raw.githubusercontent.com/droopp/vagrant/master/Vagrantfile . vagrant up","title":"Installation from Vagrantfile (local)"},{"location":"#installation-from-rpm-packages","text":"curl https://dropfaas.com/RPMS/drop-bootstrap.sh | sudo sh","title":"Installation from RPM packages"},{"location":"#configuring-drop-node-after-set-up-systemctl-restart-drop-core","text":"","title":"Configuring DROP node (after set up  - systemctl restart drop-core)"},{"location":"#inter-node-communication-interface-optional","text":"If you have more than one network interface and don't want to use default interface, you need configure name of inerface sudo echo 'export DROP_IFACE=eth1' /home/drop-core/.bashrc eth1 - example name of network interface By default node will be used default network interface","title":"Inter-node communication interface (Optional)"},{"location":"#declare-nodes-optional","text":"If your network not support multicast you need declare your nodes For example sudo echo '192.168.50.4 192.168.50.5 192.168.50.6' /var/lib/drop/drop-hosts By default nodes will declare self by multicast","title":"Declare nodes (Optional)"},{"location":"#linux-system-optimisation-optional","text":"In production you need tune linux parameters for better performance ulimit -n vm.swappiness vm.vfs_cache_pressure vm.dirty_ratio vm.dirty_background_ratio vm.dirty_writeback_centisecs vm.dirty_expire_centisecs kernel.panic fs.file-max net.core.netdev_max_backlog net.core.somaxconn net.ipv4.tcp_syncookies net.ipv4.tcp_max_syn_backlog net.ipv4.tcp_max_tw_buckets net.ipv4.tcp_tw_recycle net.ipv4.tcp_timestamps net.ipv4.tcp_tw_reuse net.ipv4.tcp_fin_timeout net.ipv4.tcp_keepalive_time net.ipv4.tcp_keepalive_probes net.ipv4.tcp_keepalive_intvl net.core.wmem_max net.core.rmem_max net.core.rmem_default net.core.wmem_default net.ipv4.tcp_rmem net.ipv4.tcp_wmem","title":"Linux system optimisation (Optional)"},{"location":"architecture/","text":"Welcome to DROP (Distributed Reliable Operation Platform) Cluster Cluster is all shared machine resources (nodes) Nodes Nodes are resources of machines with the DROP installed. Can be combined into groups (Namespaces) on the basis of - security, resources, scheduler .. Namespace Namespace is a logical group that includes one or more nodes. After creation, nodes join together within this group. Nodes can move between groups without downtime. Each namespace has: floating IP address L4/L7 balancer Scheduler All administrative commands can be executed within one namespace Services Services - services external to the platform (systemd services) that can be launched and accompanied by the platform. Within the namespace, you can set the number of required services that will be maintained in the desired state and number in the event of nodes falling out or reconfiguration Function Actually, this is the same atomic unit of calculation. It can be a system (for example, a scheduler, a node state, events ..) or a user (directly those containers that perform CPU-bound tasks). # # Python func example # import sys import time # API def read(): msg = sys.stdin.readline() return msg.strip() def log(m): sys.stderr.write(\"{}: {}\\n\".format(time.time(), m)) sys.stderr.flush() def send(m): sys.stdout.write(\"{}\\n\".format(m)) sys.stdout.flush() # Process - actor # read - recieve message from world # send - send message to world # log - logging anything def main(t): while 1: msg = read() if not msg: break log(\"start working..\") log(\"get message: \" + msg) resp = \"{}\".format(msg) send(resp) log(\"message send: {}\".format(resp)) if __name__ == \"__main__\": main(sys.argv[1]) Pool This is a logical element that includes one or more computational functions. The pool has elastic characteristics (size, timeouts, launch strategies ..) All messages are asynchronous A pool can subscribe to events of another pool (both local and distributed) May subscribe to events coming from him Selective reception of messages - subscription to messages with a specific label Strategies for posting a message in a pool: free, all, function .. There is a cache Registered in a distributed environment by name Flow Flow is a computational function declaration (YAML), or a certain route / subscription script, or execution of instruction sets. One flow can have multiple scenarios. For example, pool start scripts, strategies for subscribing to other pools, stopping the pool. # func declare example name: pyex func: - name: pyex image: pyex:0.1.0 cmd: /usr/bin/python pyex.py 1 Plugin Plugins are a set of system functions that extend the functionality of the platform.","title":"Architecture"},{"location":"architecture/#welcome-to-drop-distributed-reliable-operation-platform","text":"","title":"Welcome to DROP (Distributed Reliable Operation Platform)"},{"location":"architecture/#cluster","text":"Cluster is all shared machine resources (nodes)","title":"Cluster"},{"location":"architecture/#nodes","text":"Nodes are resources of machines with the DROP installed. Can be combined into groups (Namespaces) on the basis of - security, resources, scheduler ..","title":"Nodes"},{"location":"architecture/#namespace","text":"Namespace is a logical group that includes one or more nodes. After creation, nodes join together within this group. Nodes can move between groups without downtime. Each namespace has: floating IP address L4/L7 balancer Scheduler All administrative commands can be executed within one namespace","title":"Namespace"},{"location":"architecture/#services","text":"Services - services external to the platform (systemd services) that can be launched and accompanied by the platform. Within the namespace, you can set the number of required services that will be maintained in the desired state and number in the event of nodes falling out or reconfiguration","title":"Services"},{"location":"architecture/#function","text":"Actually, this is the same atomic unit of calculation. It can be a system (for example, a scheduler, a node state, events ..) or a user (directly those containers that perform CPU-bound tasks). # # Python func example # import sys import time # API def read(): msg = sys.stdin.readline() return msg.strip() def log(m): sys.stderr.write(\"{}: {}\\n\".format(time.time(), m)) sys.stderr.flush() def send(m): sys.stdout.write(\"{}\\n\".format(m)) sys.stdout.flush() # Process - actor # read - recieve message from world # send - send message to world # log - logging anything def main(t): while 1: msg = read() if not msg: break log(\"start working..\") log(\"get message: \" + msg) resp = \"{}\".format(msg) send(resp) log(\"message send: {}\".format(resp)) if __name__ == \"__main__\": main(sys.argv[1])","title":"Function"},{"location":"architecture/#pool","text":"This is a logical element that includes one or more computational functions. The pool has elastic characteristics (size, timeouts, launch strategies ..) All messages are asynchronous A pool can subscribe to events of another pool (both local and distributed) May subscribe to events coming from him Selective reception of messages - subscription to messages with a specific label Strategies for posting a message in a pool: free, all, function .. There is a cache Registered in a distributed environment by name","title":"Pool"},{"location":"architecture/#flow","text":"Flow is a computational function declaration (YAML), or a certain route / subscription script, or execution of instruction sets. One flow can have multiple scenarios. For example, pool start scripts, strategies for subscribing to other pools, stopping the pool. # func declare example name: pyex func: - name: pyex image: pyex:0.1.0 cmd: /usr/bin/python pyex.py 1","title":"Flow"},{"location":"architecture/#plugin","text":"Plugins are a set of system functions that extend the functionality of the platform.","title":"Plugin"},{"location":"examples/","text":"Examples of DROP functions 1. Create function Python func example import sys import time # API def read(): msg = sys.stdin.readline() return msg.strip() def log(m): sys.stderr.write(\"{}: {}\\n\".format(time.time(), m)) sys.stderr.flush() def send(m): sys.stdout.write(\"{}\\n\".format(m)) sys.stdout.flush() # Process - actor # read - recieve message from world # send - send message to world # log - logging anything def main(t): while 1: msg = read() if not msg: break log(\"start working..\") log(\"get message: \" + msg) resp = \"{}\".format(msg) send(resp) log(\"message send: {}\".format(resp)) if __name__ == \"__main__\": main(sys.argv[1]) 2. Build docker image and push to registry Dockerfile FROM ubuntu:16.04 RUN apt-get update apt-get install -y python RUN useradd drop COPY ./pyex.py /home/drop/ 3. Declare function pyex.yaml name: pyex func: - name: pyex image: pyex:0.1.0 cmd: /usr/bin/python pyex.py 1","title":"Examples"},{"location":"examples/#examples-of-drop-functions","text":"","title":"Examples of DROP functions"},{"location":"examples/#1-create-function","text":"","title":"1. Create function"},{"location":"examples/#python-func-example","text":"import sys import time # API def read(): msg = sys.stdin.readline() return msg.strip() def log(m): sys.stderr.write(\"{}: {}\\n\".format(time.time(), m)) sys.stderr.flush() def send(m): sys.stdout.write(\"{}\\n\".format(m)) sys.stdout.flush() # Process - actor # read - recieve message from world # send - send message to world # log - logging anything def main(t): while 1: msg = read() if not msg: break log(\"start working..\") log(\"get message: \" + msg) resp = \"{}\".format(msg) send(resp) log(\"message send: {}\".format(resp)) if __name__ == \"__main__\": main(sys.argv[1])","title":"Python func example"},{"location":"examples/#2-build-docker-image-and-push-to-registry","text":"","title":"2. Build docker image and push to registry"},{"location":"examples/#dockerfile","text":"FROM ubuntu:16.04 RUN apt-get update apt-get install -y python RUN useradd drop COPY ./pyex.py /home/drop/","title":"Dockerfile"},{"location":"examples/#3-declare-function","text":"","title":"3. Declare function"},{"location":"examples/#pyexyaml","text":"name: pyex func: - name: pyex image: pyex:0.1.0 cmd: /usr/bin/python pyex.py 1","title":"pyex.yaml"},{"location":"facs/","text":"Welcome to DROP (Distributed Reliable Operation Platform)","title":"FAQs"},{"location":"facs/#welcome-to-drop-distributed-reliable-operation-platform","text":"","title":"Welcome to DROP (Distributed Reliable Operation Platform)"},{"location":"plugins/","text":"DROP Plugins drop-plgn-webbone Admin web interface (admin/admin123) Minimal (SPA) ui for viewing cluster metricts drop-plgn-cmd-exec Plugin for external command/services execution start|stop systemd services (run as drop-core user) drop-plgn-rrd Plugin for rrd metrics and graph collection Use local rrd database on node for collecting data (5 minutes) drop-plgn-vip-aws Plugin for AWS vip + EIP manipulation","title":"Plugins"},{"location":"plugins/#drop-plugins","text":"","title":"DROP Plugins"},{"location":"plugins/#drop-plgn-webbone","text":"Admin web interface (admin/admin123) Minimal (SPA) ui for viewing cluster metricts","title":"drop-plgn-webbone"},{"location":"plugins/#drop-plgn-cmd-exec","text":"Plugin for external command/services execution start|stop systemd services (run as drop-core user)","title":"drop-plgn-cmd-exec"},{"location":"plugins/#drop-plgn-rrd","text":"Plugin for rrd metrics and graph collection Use local rrd database on node for collecting data (5 minutes)","title":"drop-plgn-rrd"},{"location":"plugins/#drop-plgn-vip-aws","text":"Plugin for AWS vip + EIP manipulation","title":"drop-plgn-vip-aws"},{"location":"tools/","text":"CLI tools drop-cli drop-cli \u2014 command line for managing a DROP start with arg to connect another host (default localhost) ex. drop-cli HOST ================= login - login in system freenode_list - list of free nodes freenode_clear - remove all free nodes (refresh list) cluster_list - list of avaliable clusters cluster_create - create new cluster cluster_destroy - destroy existing cluster cluster_start - start all cluster nodes cluster_stop - stop all cluster nodes cluster_node - add/rm/start/stop node in cluster cluster_info - info of cluster cluster_version - version nodes of cluster service_list - list of systemd services service_start - start systemd services service_stop - stop of systemd services service_status - status of systemd services service_conf - configurate systemd services plugin_repo - find avaliable plugin in repo plugin_install - install plugin plugin_remove - remove plugin plugin_list - list of plugin plugin_start - start plugin plugin_stop - stop plugin plugin_info - info of plugin plugin_call - call msg to plugin fun_repo - find avaliable fun in repo fun_install - install fun fun_remove - remove fun fun_list - list of fun flow_install - install flow flow_remove - remove flow flow_list - list of flow flow_start - start flow flow_stop - stop flow flow_info - info of flow flow_call - call msg to flow stats_cluster - system stats of cluster nodes stats_plugin - system stats of groups on nodes","title":"Tools"},{"location":"tools/#cli-tools","text":"","title":"CLI tools"},{"location":"tools/#drop-cli","text":"drop-cli \u2014 command line for managing a DROP start with arg to connect another host (default localhost) ex. drop-cli HOST ================= login - login in system freenode_list - list of free nodes freenode_clear - remove all free nodes (refresh list) cluster_list - list of avaliable clusters cluster_create - create new cluster cluster_destroy - destroy existing cluster cluster_start - start all cluster nodes cluster_stop - stop all cluster nodes cluster_node - add/rm/start/stop node in cluster cluster_info - info of cluster cluster_version - version nodes of cluster service_list - list of systemd services service_start - start systemd services service_stop - stop of systemd services service_status - status of systemd services service_conf - configurate systemd services plugin_repo - find avaliable plugin in repo plugin_install - install plugin plugin_remove - remove plugin plugin_list - list of plugin plugin_start - start plugin plugin_stop - stop plugin plugin_info - info of plugin plugin_call - call msg to plugin fun_repo - find avaliable fun in repo fun_install - install fun fun_remove - remove fun fun_list - list of fun flow_install - install flow flow_remove - remove flow flow_list - list of flow flow_start - start flow flow_stop - stop flow flow_info - info of flow flow_call - call msg to flow stats_cluster - system stats of cluster nodes stats_plugin - system stats of groups on nodes","title":"drop-cli"},{"location":"tutor/","text":"DROP Tutorials Instalation Vagrant On Premis AWS Create function Python Python (stream) NodeJS Create flow Func declaration Flow (ping-pong)","title":"Totorials"},{"location":"tutor/#drop-tutorials","text":"","title":"DROP Tutorials"},{"location":"tutor/#instalation","text":"","title":"Instalation"},{"location":"tutor/#vagrant","text":"","title":"Vagrant"},{"location":"tutor/#on-premis","text":"","title":"On Premis"},{"location":"tutor/#aws","text":"","title":"AWS"},{"location":"tutor/#create-function","text":"","title":"Create function"},{"location":"tutor/#python","text":"","title":"Python"},{"location":"tutor/#python-stream","text":"","title":"Python (stream)"},{"location":"tutor/#nodejs","text":"","title":"NodeJS"},{"location":"tutor/#create-flow","text":"","title":"Create flow"},{"location":"tutor/#func-declaration","text":"","title":"Func declaration"},{"location":"tutor/#flow-ping-pong","text":"","title":"Flow (ping-pong)"}]}